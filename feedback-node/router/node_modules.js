//没有使用模板引擎的node-apache版本
const fs = require('fs')
const path = require('path')
const config = require('../config')
const documentRoot = config.documentRoot

exports.response = function (req, res) {
    let url = req.url
    console.log(url)
    let tmp = documentRoot + url
    let exist = fs.existsSync(tmp)
    if (exist) {
        let stats1 = fs.statSync(tmp)

        if (stats1.isDirectory()) {
            // for (let key in config.directoryIndex) {
            //     let file = tmp + '/' + config.directoryIndex[key]
            //     console.log(file);
            //     if (fs.existsSync(file)) {
            //         res.writeHead(301, {'Location': 'http://127.0.0.1:' + config.port + 'node_modules/' + url + config.directoryIndex[key]})
            //         res.end()
            //         return
            //     }
            // }
            if (!config.directoryBrowse) {
                //没有开放目录浏览权限
                res.statusCode(403)
                res.end('403 forbidden!!')
                return
            }
            //遍历目录
            fs.readFile(path.join(__dirname,'../views/template.html'), function (err, data) {
                if (err) {
                    return res.end('4040 Not Found!!!')
                }
                // 1. 如何得到 documentRoot 目录列表中的文件名和目录名
                //    fs.readdir
                // 2. 如何将得到的文件名和目录名替换到 template.html 中
                //    2.1 在 template.html 中需要替换的位置预留一个特殊的标记（就像以前使用模板引擎的标记一样）
                //    2.2 根据 files 生成需要的 HTML 内容
                let prevDisplay = 'block'
                if (url == '/') {
                    prevDisplay = 'none'
                }
                fs.readdir(tmp, async function (err, files) {
                    if (err) {
                        return res.end('Can not find dir.')
                    }
                    // 2.1 生成需要替换的内容
                    let content = ''
                    files.forEach(function (item) {
                        let type = ''
                        let separate = ''
                        let stats2 = fs.statSync(tmp + item)
                        if (stats2.isDirectory()) {
                            type = 'dir'
                            separate = '/'
                        } else {
                            type = 'file'
                        }
                        content += `
                        <tr>
                            <td data-value="apple/"><a class="icon ${type}" href="http://127.0.0.1:${config.port + url + item + separate}">${item + separate}</a></td>
                        </tr>
                    `
                    })
                    // 替换
                    data = data.toString()
                    data = data.replace('^_^', content)
                    data = data.replace('{{display}}', `style="display:${prevDisplay}"`)
                    data = data.replace(/{{parentPath}}/g, url.substring(0, url.substr(0, url.length - 1).lastIndexOf('/') + 1))
                    data = data.replace(/{{path}}/g, url.substring(1))
                    // 发送解析替换过后的响应数据
                    res.end(data)
                })
            })
        } else {
            //渲染文件
            fs.readFile(tmp, function (err, data) {
                if (err) {
                    res.end()
                }
                let ext = path.extname(tmp).substring(1)
                if (ext in config.mineType.text) {
                    res.setHeader('Content-Type', `${config.mineType.text[ext]}; charset=${config.charset}`)
                } else if (ext in config.mineType.image) {
                    res.setHeader('Content-Type', `${config.mineType.text[ext]}`)
                } else {
                    res.setHeader('Content-Type', `${config.mineType.other}; charset=${config.charset}`)
                }
                res.end(data)
            })
        }
    } else {
        res.end()
    }
}